# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-02-13 09:54:02
"""
import arcpy
from sys import argv
def DataExistsIfThenElse_mb(in_data, data_type):
  try :
    arcpy.Describe(in_data, data_type)
    return True
  except ValueError :
    return False

def DataExistsIfThenElse_mb(in_data, data_type):
  try :
    arcpy.Describe(in_data, data_type)
    return True
  except ValueError :
    return False


#For inline variable substitution, parameters passed as a String are evaluated using locals(), globals() and isinstance(). To override, substitute values directly.
def BuildRouteNetwork(Input_Study_Area_Feature="AOI", Distance_value_or_field_="3 Kilometers", Input_Road_Network_Features_to_Clip="https://services-ap1.arcgis.com/iA7fZQOnjY9D67Zx/arcgis/rest/services/OSM_AS_Highways/FeatureServer/0", Routes_ND_V3_xml="C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\network_template\\Routes_ND_V3.xml", Network_Dataset="C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Network_Dataset", Point_Type="BOTH_ENDS"):  # Build Route Network

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("Network")


    # Process: Buffer (Buffer) (analysis)
    Output_Feature_Class = "C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\AOI_Buffer"
    arcpy.analysis.Buffer(in_features=Input_Study_Area_Feature.__str__().format(**locals(),**globals())if isinstance(Input_Study_Area_Feature, str) else Input_Study_Area_Feature, out_feature_class=Output_Feature_Class, buffer_distance_or_field=Distance_value_or_field_.__str__().format(**locals(),**globals())if isinstance(Distance_value_or_field_, str) else Distance_value_or_field_)

    # Process: Pairwise Clip (Pairwise Clip) (analysis)
    streets = "C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Network_Dataset\\streets"
    arcpy.analysis.PairwiseClip(in_features=Input_Road_Network_Features_to_Clip.__str__().format(**locals(),**globals())if isinstance(Input_Road_Network_Features_to_Clip, str) else Input_Road_Network_Features_to_Clip, clip_features=Output_Feature_Class, out_feature_class=streets)

    # Process: If Data Exists (If Data Exists) ()
    True_9, False_10 = DataExistsIfThenElse_mb(in_data=streets)

    # Process: Feature Vertices To Points (Feature Vertices To Points) (management)
    junction = "C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Network_Dataset\\junction"
    arcpy.management.FeatureVerticesToPoints(in_features=streets, out_feature_class=junction, point_location=Point_Type.__str__().format(**locals(),**globals())if isinstance(Point_Type, str) else Point_Type)

    # Process: If Data Exists (2) (If Data Exists) ()
    True_2_, False_2_ = DataExistsIfThenElse_mb(in_data=junction)

    # Process: Create Network Dataset From Template (Create Network Dataset From Template) (na)
    if True_2_ and True_9:
        Route_ND = arcpy.na.CreateNetworkDatasetFromTemplate(network_dataset_template=Routes_ND_V3_xml.__str__().format(**locals(),**globals())if isinstance(Routes_ND_V3_xml, str) else Routes_ND_V3_xml, output_feature_dataset=Network_Dataset.__str__().format(**locals(),**globals())if isinstance(Network_Dataset, str) else Network_Dataset)[0]

    # Process: Build Network (Build Network) (na)
    if True_2_ and True_9:
        Updated_Input_Network_Dataset = arcpy.na.BuildNetwork(in_network_dataset=Route_ND)[0]

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb", workspace="C:\\Users\\and10749\\OneDrive - Esri\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb"):
        BuildRouteNetwork(*argv[1:])
