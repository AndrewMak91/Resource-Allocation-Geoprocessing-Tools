# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-02-13 10:28:18
"""
import arcpy
from sys import argv

#For inline variable substitution, parameters passed as a String are evaluated using locals(), globals() and isinstance(). To override, substitute values directly.
def LocationAllocationModel(Route_ND="C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Network_Dataset\\Route_ND", Travel_Mode="Walking", Cutoff=2.5, Problem_Type="MAXIMIZE_CAPACITATED_COVERAGE", Travel_Direction="TO_FACILITIES"):  # Location Allocation Model

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    NetworkAnalysis_Package_gdb = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb"
    SA_Washroom_Centroid_Final = "SA_Washroom_Centroid_Final"
    Location_Allocation_Prep_2_ = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Location_Allocation_Prep"
    Tent_Centroids = "Tent_Centroids"
    Location_Allocation_Prep = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Location_Allocation_Prep"
    OD_Matrix_Lines = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\OD_Matrix_Lines"
    Location_Allocation_Results = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Location_Allocation_Results"
    Location_Allocation_Results_2_ = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Location_Allocation_Results"
    Location_Allocation_Results_3_ = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Location_Allocation_Results"

    # Process: Make Location-Allocation Analysis Layer (Make Location-Allocation Analysis Layer) (na)
    Location_Allocation = arcpy.na.MakeLocationAllocationAnalysisLayer(network_data_source=Route_ND.__str__().format(**locals(),**globals())if isinstance(Route_ND, str) else Route_ND, travel_mode=Travel_Mode.__str__().format(**locals(),**globals())if isinstance(Travel_Mode, str) else Travel_Mode, travel_direction=Travel_Direction.__str__().format(**locals(),**globals())if isinstance(Travel_Direction, str) else Travel_Direction, problem_type=Problem_Type.__str__().format(**locals(),**globals())if isinstance(Problem_Type, str) else Problem_Type, cutoff=Cutoff.__str__().format(**locals(),**globals())if isinstance(Cutoff, str) else Cutoff, number_of_facilities_to_find=290, accumulate_attributes=["Length", "Walking"])[0]

    # Process: Feature Class To Feature Class (2) (Feature Class To Feature Class) (conversion)
    SA_Washroom_Centroid_Rank = arcpy.conversion.FeatureClassToFeatureClass(in_features=SA_Washroom_Centroid_Final, out_path=Location_Allocation_Prep_2_, out_name="SA_Washroom_Centroid_Rank", field_mapping="ORIG_OID \"ORIG_OID\" true true false 4 Long 0 0,First,#,SA_Washroom_Centroid_Final,ORIG_OID,-1,-1;Population \"Population\" true true false 4 Long 0 0,First,#,SA_Washroom_Centroid_Final,Population,-1,-1;households \"Households\" true true false 2 Short 0 0,First,#,SA_Washroom_Centroid_Final,households,-1,-1;washroom_capacity \"Washroom Capacity\" true true false 4 Long 0 0,First,#,SA_Washroom_Centroid_Final,washroom_capacity,-1,-1;WashID \"WashID\" true true false 512 Text 0 0,First,#,SA_Washroom_Centroid_Final,WashID,0,511;Sum_Population \"Sum Population\" true true false 4 Long 0 0,First,#,SA_Washroom_Centroid_Final,Sum_Population,-1,-1;TentCount \"TentCount\" true true false 4 Long 0 0,First,#,SA_Washroom_Centroid_Final,TentCount,-1,-1;WashID_Count \"WashID_Count\" true true false 8 Double 0 0,First,#,SA_Washroom_Centroid_Final,WashID_Count,-1,-1")[0]

    # Process: Add Field (Add Field) (management)
    SA_Washroom_Centroid_Rank_2_ = arcpy.management.AddField(in_table=SA_Washroom_Centroid_Rank, field_name="Rank_Wash", field_type="FLOAT", field_alias="Rank_Wash")[0]

    # Process: Calculate Field (4) (Calculate Field) (management)
    SA_Washroom_Centroid_Rank_3_ = arcpy.management.CalculateField(in_table=SA_Washroom_Centroid_Rank_2_, field="Rank_Wash", expression="Reclass(!TentCount!)", code_block="""# Reclassify values to another value
# More calculator examples at esriurl.com/CalculatorExamples
def Reclass(TentCount):
    if TentCount <= 98:
        return 1
    elif (TentCount >= 99 and TentCount <= 195):
        return 2
    elif (TentCount >= 196 and TentCount <= 300):
        return 3""")[0]

    # Process: Feature Class To Feature Class (Feature Class To Feature Class) (conversion)
    SA_OD_Tent_Centroid_Rank = arcpy.conversion.FeatureClassToFeatureClass(in_features=Tent_Centroids, out_path=Location_Allocation_Prep, out_name="SA_OD_Tent_Centroid_Rank", field_mapping="ORIG_OID \"ORIG_OID\" true true false 4 Long 0 0,First,#,Tent_Centroids,ORIG_OID,-1,-1;Population \"Population\" true true false 4 Long 0 0,First,#,Tent_Centroids,Population,-1,-1;households \"Households\" true true false 2 Short 0 0,First,#,Tent_Centroids,households,-1,-1;washroom_capacity \"Washroom Capacity\" true true false 4 Long 0 0,First,#,Tent_Centroids,washroom_capacity,-1,-1;TentID \"TentID\" true true false 512 Text 0 0,First,#,Tent_Centroids,TentID,0,511;FREQUENCY \"FREQUENCY\" true true false 4 Long 0 0,First,#,Tent_Centroids,FREQUENCY,-1,-1")[0]

    # Process: Join Field (Join Field) (management)
    SA_OD_Tent_Centroid_Rank_2_ = arcpy.management.JoinField(in_data=SA_OD_Tent_Centroid_Rank, in_field="TentID", join_table=OD_Matrix_Lines, join_field="Tent_ID", fields=["ClosestFacil_Len", "ClosestFacil_min", "Wash_ID"])[0]

    # Process: Add Fields (multiple) (Add Fields (multiple)) (management)
    SA_OD_Tent_Centroid_Rank_6_ = arcpy.management.AddFields(in_table=SA_OD_Tent_Centroid_Rank_2_)[0]

    # Process: Calculate Field (Calculate Field) (management)
    SA_OD_Tent_Centroid_Rank_3_ = arcpy.management.CalculateField(in_table=SA_OD_Tent_Centroid_Rank_6_, field="Rank_WashID", expression="Reclass(!Wash_ID!)", code_block="""# Reclassify values to another value
# More calculator examples at esriurl.com/CalculatorExamples
def Reclass(Wash_ID):
    if Wash_ID is not None:
        return 1
    else:
        return 0""")[0]

    # Process: Calculate Field (2) (Calculate Field) (management)
    SA_OD_Tent_Centroid_Rank_4_ = arcpy.management.CalculateField(in_table=SA_OD_Tent_Centroid_Rank_3_, field="Rank_WalkTime", expression="Reclass(!ClosestFacil_min!)", code_block="""# Reclassify values to another value
# More calculator examples at esriurl.com/CalculatorExamples
def Reclass(ClosestFacil_min):
    if ClosestFacil_min < 1:
        return 1
    else:
        return 0""")[0]

    # Process: Calculate Field (3) (Calculate Field) (management)
    SA_OD_Tent_Centroid_Rank_5_ = arcpy.management.CalculateField(in_table=SA_OD_Tent_Centroid_Rank_4_, field="Rank", expression="!Rank_WashID! + !Rank_WalkTime!")[0]

    # Process: Summary Statistics (Summary Statistics) (analysis)
    Wash_Rank_List_Nearest = "C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb\\Wash_Rank_List_Nearest"
    arcpy.analysis.Statistics(in_table=SA_OD_Tent_Centroid_Rank_5_, out_table=Wash_Rank_List_Nearest, statistics_fields=[["Rank", "SUM"]], case_field=["Wash_ID"])

    # Process: Join Field (2) (Join Field) (management)
    SA_Washroom_Centroid_Rank_4_ = arcpy.management.JoinField(in_data=SA_Washroom_Centroid_Rank_3_, in_field="WashID", join_table=Wash_Rank_List_Nearest, join_field="Wash_ID", fields=["SUM_Rank"])[0]

    # Process: Calculate Field (5) (Calculate Field) (management)
    SA_Washroom_Centroid_Rank_5_ = arcpy.management.CalculateField(in_table=SA_Washroom_Centroid_Rank_4_, field="SUM_Rank", expression="Reclass(!SUM_Rank!)", code_block="""# Reclassify values to another value
# More calculator examples at esriurl.com/CalculatorExamples
def Reclass(SUM_Rank):
    if SUM_Rank is None:
        return 0
    else:
        return SUM_Rank""")[0]

    # Process: Calculate Field (6) (Calculate Field) (management)
    SA_Washroom_Centroid_Rank_6_ = arcpy.management.CalculateField(in_table=SA_Washroom_Centroid_Rank_5_, field="Rank_Wash", expression="!Rank_Wash! + !SUM_Rank!")[0]

    # Process: Delete Field (Delete Field) (management)
    SA_Washroom_Centroid_Rank_7_ = arcpy.management.DeleteField(in_table=SA_Washroom_Centroid_Rank_6_, drop_field=["SUM_Rank"])[0]

    # Process: Add Locations (Add Locations) (na)
    Location_Allocation_2_ = arcpy.na.AddLocations(in_network_analysis_layer=Location_Allocation, sub_layer="Facilities", in_table=SA_Washroom_Centroid_Rank_7_, append="CLEAR")[0]

    # Process: Add Locations (2) (Add Locations) (na)
    Location_Allocation_4_ = arcpy.na.AddLocations(in_network_analysis_layer=Location_Allocation_2_, sub_layer="Demand Points", in_table=SA_OD_Tent_Centroid_Rank, append="CLEAR")[0]

    # Process: Solve (Solve) (na)
    Network_Analyst_Layer, Solve_Succeeded = arcpy.na.Solve(in_network_analysis_layer=Location_Allocation_4_)

    # Process: Select_Data (Select Data) 
    # Select Data Utility is not implemented 

    # Process: Feature Class To Feature Class (3) (Feature Class To Feature Class) (conversion)
    Facility = arcpy.conversion.FeatureClassToFeatureClass(in_features=Child_Data_Element, out_path=Location_Allocation_Results, out_name="Facility", field_mapping="Name \"Name\" true true true 500 Text 0 0,First,#,Facilities,Name,0,499;FacilityType \"FacilityType\" true true true 4 Long 0 0,First,#,Facilities,FacilityType,-1,-1;Weight \"Weight\" true true true 8 Double 0 0,First,#,Facilities,Weight,-1,-1;Capacity \"Capacity\" true true true 8 Double 0 0,First,#,Facilities,Capacity,-1,-1;DemandCount \"DemandCount\" true true true 4 Long 0 0,First,#,Facilities,DemandCount,-1,-1;DemandWeight \"DemandWeight\" true true true 8 Double 0 0,First,#,Facilities,DemandWeight,-1,-1;DistanceToNetworkInMeters \"DistanceToNetworkInMeters\" true true true 8 Double 0 0,First,#,Facilities,DistanceToNetworkInMeters,-1,-1;Total_Walking \"Total_Walking\" true true true 8 Double 0 0,First,#,Facilities,Total_Walking,-1,-1;Total_Length \"Total_Length\" true true true 8 Double 0 0,First,#,Facilities,Total_Length,-1,-1;TotalWeighted_Walking \"TotalWeighted_Walking\" true true true 8 Double 0 0,First,#,Facilities,TotalWeighted_Walking,-1,-1;TotalWeighted_Length \"TotalWeighted_Length\" true true true 8 Double 0 0,First,#,Facilities,TotalWeighted_Length,-1,-1")[0]

    # Process: Select_Data_2_ (Select Data) 
    # Select Data Utility is not implemented 

    # Process: Feature Class To Feature Class (4) (Feature Class To Feature Class) (conversion)
    Demand = arcpy.conversion.FeatureClassToFeatureClass(in_features=Demand_Points, out_path=Location_Allocation_Results_2_, out_name="Demand", field_mapping="Name \"Name\" true true true 500 Text 0 0,First,#,Demand Points,Name,0,499;Weight \"Weight\" true true true 8 Double 0 0,First,#,Demand Points,Weight,-1,-1;FacilityID \"FacilityID\" true true true 4 Long 0 0,First,#,Demand Points,FacilityID,-1,-1;AllocatedWeight \"AllocatedWeight\" true true true 8 Double 0 0,First,#,Demand Points,AllocatedWeight,-1,-1;Cutoff_Walking \"Cutoff_Walking\" true true true 8 Double 0 0,First,#,Demand Points,Cutoff_Walking,-1,-1;Cutoff_Length \"Cutoff_Length\" true true true 8 Double 0 0,First,#,Demand Points,Cutoff_Length,-1,-1")[0]

    # Process: Select_Data_3_ (Select Data) 
    # Select Data Utility is not implemented 

    # Process: Add Fields (multiple) (2) (Add Fields (multiple)) (management)
    Lines_2_ = arcpy.management.AddFields(in_table=Lines)[0]

    # Process: Calculate Fields (multiple) (Calculate Fields (multiple)) (management)
    Lines_3_ = arcpy.management.CalculateFields(in_table=Lines_2_, expression_type="PYTHON3", fields=[["TentID", "!Name!.split(' ')[0]", ""], ["WashID", "!Name!.split(' ')[2]", ""]])[0]

    # Process: Feature Class To Feature Class (5) (Feature Class To Feature Class) (conversion)
    Routes = arcpy.conversion.FeatureClassToFeatureClass(in_features=Lines_3_, out_path=Location_Allocation_Results_3_, out_name="Routes", field_mapping="Name \"Name\" true true true 1024 Text 0 0,First,#,Location-Allocation\\Lines,Name,0,1023;TentID \"TentID\" true true false 255 Text 0 0,First,#,Location-Allocation\\Lines,TentID,0,254;WashID \"WashID\" true true false 255 Text 0 0,First,#,Location-Allocation\\Lines,WashID,0,254;Weight \"Weight\" true true true 8 Double 0 0,First,#,Location-Allocation\\Lines,Weight,-1,-1;TotalWeighted_Walking \"TotalWeighted_Walking\" true true true 8 Double 0 0,First,#,Location-Allocation\\Lines,TotalWeighted_Walking,-1,-1;TotalWeighted_Length \"TotalWeighted_Length\" true true true 8 Double 0 0,First,#,Location-Allocation\\Lines,TotalWeighted_Length,-1,-1;Total_Walking \"Total_Walking\" true true true 8 Double 0 0,First,#,Location-Allocation\\Lines,Total_Walking,-1,-1;Total_Length \"Total_Length\" true true true 8 Double 0 0,First,#,Location-Allocation\\Lines,Total_Length,-1,-1")[0]

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb", workspace="C:\\Users\\Computer Name\\Esri_Training\\SpatialAnalysis_Challenge\\Workflow\\NetworkAnalysis_Pro29_Build\\NetworkAnalysis_Package\\NetworkAnalysis_Package.gdb"):
        LocationAllocationModel(*argv[1:])
